#!/bin/sh

# ================================================================
# This is similar to reg_test/run except that this one is only ever run
# manually, not automatically as part of the build. It can be used to iterate on
# as-yet-unreleased features (in particular, features whose definition isn't
# finalized) without breaking the build.
# ================================================================
set -e

ourdir=`dirname $0`
srcdir=$ourdir/../..
pwd=`pwd`

try1=$pwd/../mlr    # For autoconf builds, in-tree or out-of-tree
try2=$srcdir/c/mlr  # For non-autoconf builds
if [ -x "$try1" ]; then
  path_to_mlr=$try1
elif [ -x "$try2" ]; then
  path_to_mlr=$try2
else
  echo "$0: Could not find path to mlr executable." 1>&2
  echo "Try 1: $try1" 1>&2
  echo "Try 2: $try2" 1>&2
  exit 1
fi

if [ "$1" = "--valgrind" ]; then
  # Leak-check the test suite. Needs 'make mlrg' first.
  # ../tools/clean-valg can be used to filter the output.
  path_to_mlr="valgrind --leak-check=full ${path_to_mlr}g"
fi
echo Using mlr executable $path_to_mlr

indir=$ourdir/input
expdir=$ourdir/expected
outdir=$pwd/output
outfile=$outdir/out-dev
expfile=$expdir/out-dev
mkdir -p $outdir

rm -f $outfile
touch $outfile
echo

num_passed=0

announce() {
	echo >> $outfile
	echo "================================================================" >> $outfile
	echo "$@" >> $outfile
	echo >> $outfile
}

mention() {
	echo >> $outfile
	echo ---------------------------------------------------------------- "$@" >> $outfile
}

run_mlr() {
  # Use just "mlr" for info messages
	echo mlr "$@"
	echo mlr "$@" >> $outfile
  # Use path to mlr for invoking the command
	$path_to_mlr "$@" >> $outfile
	echo >> $outfile
	# since set -e
	num_passed=`expr $num_passed + 1`
}

# ================================================================
announce OLD NULL-HANDLING

mention ok
run_mlr put '$z = $x + $y'      $indir/null-vs-empty.dkvp
mention ok
run_mlr put '$z = $y + $y'      $indir/null-vs-empty.dkvp
mention FIXME FOR SRECS
run_mlr put '$z = $x + $nosuch' $indir/null-vs-empty.dkvp

mention ok
run_mlr put '$t = sub($s,       "ell", "X")' $indir/null-vs-empty.dkvp
mention ok
run_mlr put '$t = sub($s,       "ell", "")'  $indir/null-vs-empty.dkvp
mention ok
run_mlr put '$t = sub($nosuch,  "ell", "X")' $indir/null-vs-empty.dkvp
mention ok
run_mlr put '$t = gsub($s,      "l",   "X")' $indir/null-vs-empty.dkvp
mention ok
run_mlr put '$t = gsub($s,      "l",   "")'  $indir/null-vs-empty.dkvp
mention ok
run_mlr put '$t = gsub($nosuch, "l",   "X")' $indir/null-vs-empty.dkvp

# ================================================================
announce NULLITY PREDICATES

run_mlr --opprint filter 'isnull($x)'         $indir/nullvals.dkvp
run_mlr --opprint filter 'isnull($y)'         $indir/nullvals.dkvp
run_mlr --opprint filter 'isnull($z)'         $indir/nullvals.dkvp
run_mlr --opprint filter 'isnull($nosuch)'    $indir/nullvals.dkvp
run_mlr --opprint filter 'isnotnull($x)'      $indir/nullvals.dkvp
run_mlr --opprint filter 'isnotnull($y)'      $indir/nullvals.dkvp
run_mlr --opprint filter 'isnotnull($z)'      $indir/nullvals.dkvp
run_mlr --opprint filter 'isnotnull($nosuch)' $indir/nullvals.dkvp

run_mlr --opprint put '$f=isnull($x)'         $indir/nullvals.dkvp
run_mlr --opprint put '$f=isnull($y)'         $indir/nullvals.dkvp
run_mlr --opprint put '$f=isnull($z)'         $indir/nullvals.dkvp
run_mlr --opprint put '$f=isnull($nosuch)'    $indir/nullvals.dkvp
run_mlr --opprint put '$f=isnotnull($x)'      $indir/nullvals.dkvp
run_mlr --opprint put '$f=isnotnull($y)'      $indir/nullvals.dkvp
run_mlr --opprint put '$f=isnotnull($z)'      $indir/nullvals.dkvp
run_mlr --opprint put '$f=isnotnull($nosuch)' $indir/nullvals.dkvp

# ================================================================
announce TRI-SPLIT-NULL HANDLING

mention ok
run_mlr put -q '@sum     += $x; end{emitp @sum}'      $indir/abixy
mention ok
run_mlr put -q '@sum[$a] += $x; end{emitp @sum, "a"}' $indir/abixy
mention ok
run_mlr put    '$nonesuch = @nonesuch' $indir/abixy

mention ok
run_mlr put -q '@sum     += $x; end{emitp @sum}'      $indir/abixy-het
mention ok
run_mlr put -q '@sum[$a] += $x; end{emitp @sum, "a"}' $indir/abixy-het
mention ok
run_mlr put    '$nonesuch = @nonesuch' $indir/abixy-het

run_mlr put -q '@sum += $x; @sumtype = typeof(@sum); @xtype = typeof($x); emitf @sumtype, @xtype, @sum; end{emitp @sum}' $indir/abixy
run_mlr put -q '@sum += $x; @sumtype = typeof(@sum); @xtype = typeof($x); emitf @sumtype, @xtype, @sum; end{emitp @sum}' $indir/abixy-het

run_mlr put '$z = $x + $y' $indir/typeof.dkvp
run_mlr put '$z = $x + $y' $indir/typeof.dkvp
run_mlr put '$z = $x + $u' $indir/typeof.dkvp

run_mlr put '@s = @s + $y; emitp @s' $indir/typeof.dkvp
run_mlr put '@s = @s + $y; emitp @s' $indir/typeof.dkvp
run_mlr put '@s = @s + $u; emitp @s' $indir/typeof.dkvp

run_mlr put '$z = $x + $y; $x=typeof($x);$y=typeof($y);$z=typeof($z)' $indir/typeof.dkvp
run_mlr put '$z = $x + $y; $x=typeof($x);$y=typeof($y);$z=typeof($z)' $indir/typeof.dkvp
run_mlr put '$z = $x + $u; $x=typeof($x);$y=typeof($y);$z=typeof($z)' $indir/typeof.dkvp

run_mlr put '@s = @s + $y; $x=typeof($x);$y=typeof($y);$z=typeof($z);$s=typeof(@s)' $indir/typeof.dkvp
run_mlr put '@s = @s + $y; $x=typeof($x);$y=typeof($y);$z=typeof($z);$s=typeof(@s)' $indir/typeof.dkvp
run_mlr put '@s = @s + $u; $x=typeof($x);$y=typeof($y);$z=typeof($z);$s=typeof(@s)' $indir/typeof.dkvp

# ================================================================
announce ABSENT-HANDLING

mention FIXME FOR SRECS
run_mlr put '$a = $a * 2' $indir/absent.dkvp

mention FIXME FOR SRECS
run_mlr put '$new = $a * 2' $indir/absent.dkvp

mention ok for oosvars
run_mlr put '$new = @nonesuch * 2' $indir/absent.dkvp

mention ok
run_mlr put 'begin {@somesuch = 10 }; $new = @somesuch * 2' $indir/absent.dkvp

mention FIXME FOR SRECS
run_mlr put '$new = @nonesuch * $a' $indir/absent.dkvp

mention ok
run_mlr put 'begin {@somesuch = 10 }; $new = @somesuch * $a' $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put '@sum = @sum + $a; emit @sum; end { emit @sum }' $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put '@product = @product * $a; emit @product; end { emit @product }' $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put 'begin { @sum = 10 }; @sum = @sum + $a; emit @sum; end { emit @sum }' $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put 'begin { @product = 10 }; @product = @product * $a; emit @product; end { emit @product }' $indir/absent.dkvp

# ================================================================
announce COMPARE OLD TESTS TO NEW

mention raw input
run_mlr cat $indir/abixy-het
mention ok
run_mlr put -q '@sum     += $x; end{emitp @sum}'      $indir/abixy-het
mention ok
run_mlr put -q '@sum[$a] += $x; end{emitp @sum, "a"}' $indir/abixy-het
mention ok
run_mlr put    '$nonesuch = @nonesuch' $indir/abixy-het

mention raw input
run_mlr cat $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put '@sum = @sum + $a; emit @sum; end { emit @sum }' $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put '@product = @product * $a; emit @product; end { emit @product }' $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put 'begin { @sum = 10 }; @sum = @sum + $a; emit @sum; end { emit @sum }' $indir/absent.dkvp

mention FIXME AND COMPARE TO ABOVE
run_mlr put 'begin { @product = 10 }; @product = @product * $a; emit @product; end { emit @product }' $indir/absent.dkvp

mention COMPARE
run_mlr put 'emit @sum; @sum += $x; emit @sum; end { emit @sum }' $indir/abixy-het

mention COMPARE
run_mlr put 'emit @sum; @sum += $a; emit @sum; end { emit @sum }' $indir/absent.dkvp

run_mlr put 'emit @sum; $ostype=typeof(@sum);$xtype=typeof($x);@sum += $x; $nstype=typeof(@sum);emit @sum; end { emit @sum }' $indir/abixy-het|redden xxx
run_mlr put 'emit @sum; $ostype=typeof(@sum);$atype=typeof($a);@sum += $a; $nstype=typeof(@sum);emit @sum; end { emit @sum }' $indir/absent.dkvp


# ================================================================
cat $outfile

echo

diff -I '^mlr ' -C5 $expfile $outfile

# ================================================================
echo ALL REGRESSION TESTS PASSED
echo Tests completed: $num_passed
