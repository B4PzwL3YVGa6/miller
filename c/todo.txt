================================================================
BUGFIXES

! $ cat a
  x=2
  a=3

  $ mlr join -j a -f a a
  mlr: internal coding error: failed transition from prefill state.

================================================================
TOP OF LIST

! before releasing miller 3:

  ! fix join on partial value-field matches

  o ovf UTs
  o clarify a bit in mld regex section
  o neaten stats1/stats2/step subverb help output

  ! decide how to get more humanized formatting including stats1, e.g.
    integer-formatted sum of integer inputs. defaulting ofmt %lf to %lg loses
    precision in epoch seconds; not ok.
    -> mv_t int-to-float logic? implement stats1/stats2/step -f if so.
    -> separate ofmt/sfmt?
    -> mt_scan_number UTs
    -> stats1/stats2/step UTs
    -> mv/mt name prefixes are inconsistent

----------------------------------------------------------------
acc/sum
min
max
diff
	mt_get_number_nullable(&val1); NULL_OR_ERROR_OUT(val1);
  mv_t n_nn_plus_func(mv_t* pval1, mv_t* pval2) { return (plus_dispositions[pval1->type][pval2->type])(pval1,pval2); }

int-to-int in stats1/stats2/step:
   k count    Count instances of fields
   k mode     Find most-frequently-occurring values for fields; first-found wins tie
  kI sum      Compute sums of specified fields
   f mean     Compute averages (sample means) of specified fields
   f stddev   Compute sample standard deviation of specified fields
   f var      Compute sample variance of specified fields
   f meaneb   Estimate error bars for averages (assuming no sample autocorrelation)
   f skewness Compute sample skewness of specified fields
   f kurtosis Compute sample kurtosis of specified fields
  kI min      Compute minimum values of specified fields
  kI max      Compute maximum values of specified fields

   f linreg-pca   Linear regression using principal component analysis
   f linreg-ols   Linear regression using ordinary least squares
   f r2           Quality metric for linreg-ols (linreg-pca emits its own)
   f logireg      Logistic regression
   f corr         Sample correlation
   f cov          Sample covariance
   f covx         Sample-covariance matrix

  kI delta    Compute differences in field(s) between successive records
   f ratio    Compute ratios in field(s) between successive records
  kI rsum     Compute running sums of field(s) between successive records
   k counter  Count instances of field(s) between successive records

----------------------------------------------------------------
* miller 3 release info:
  o functions:
    - int-to-int, pythonic division, and overflow math (all w/ one xref to mld/ref:arithmetic)
      this is backward incompatible (ish) hence the major version increment from 2 to 3.
    - bitwise operators: | ^ & << >>
    - modular arithmetic
    - urandint
    - sgn
    - strftime/strptime as generalization of sec2gmt/gmt2sec
  o I/O:
    - --xvright
  o verbs:
    - mlr cat -n; mlr grep
    - stats1 skewness & kurtosis
    - bar
    - het-join bugfix
  o docs:
    - manpage is now autogenned
    - precedence & semantics docs

* full-int64 I/O & math:
  o visually check all precedence stackings (horiz/vert) in the grammars
    against the operator prec/assoc table
  o dsls bake deps

----------------------------------------------------------------
* etc feature:
  - in1 optional: t (epoch seconds); default systime()
  - in2: nleft
  - in3 optional: target #/field name
  - in optional: -s flag or not
  - out1: etchours
  - out2: etcstamp

  o expose mapper_stats2_alloc
  o expose mapper_cut_alloc
  o encapsulate the following:
    mlr put '$t=systime()' \
      then filter 'NR>4' \
      then  put '$nleft=$target-$n' \
      then stats2 -s -a linreg-pca -f t,nleft \
      then put '$etc= -$t_n_pca_b/$t_n_pca_m; $etcstamp=sec2gmt($etc); $etchours=($etc-systime())/3600.0'

----------------------------------------------------------------
! mlrdoc not printable as PDF?!

----------------------------------------------------------------
* lrec_eval nullable etc. cleanup

* packaging:
  - brew version bump?!?

* stdin filename keyword for read-from-file-then-tail-f mode (e.g. mlr etc)

----------------------------------------------------------------

* R doc:
! xref @ covers x 2
! be very clear streaming vs. dataframe -- each has things the other can't do
! emph mlr has light stats but for heavyweight analysis use R et al.

* --mmap @ mlr -h
* bus-insurance dev page

* faqents:
  ! some of these putative faqents (and maybe some of the existing ones) should be in a cookbook page
  - csv/csvlite compare/contrast @ mld formats
  - faqent distrib mapred paradigm in general: use distributed mean as example
  - faqent re R/mysql/etc inouts
  - hold-and-fit regressor doc: 'then put' for residuals; note avoids two-pass & the saving of fit parameters
  - faqent re histo w/ min/max is effectively 2-pass (unless you have prior knowledge about the data).
    note count-distinct w/ int() func
  - faqent on two-pass lin/logi reg
  - faqent on xml/json/etc: generally no to recursive data structures; punctuation re-writes w/ well-formatted;
    in-language handling in case not field/line formatted. see h.p. mail.
  - faqent on polyglottal dkvp/etc production
  - faqent re join without -u -- it's a weird default & i'm imitating un*x join
  - same w/ cut -o
  - faqent re cat xyz | mlr ... vs. mlr ... xyz:
    o easier to up-arrow/control-P & tack on a then-statement
    o lose no functionality except FILENAME/FNR
    o lose ~10% perf due to no mmap
  - faqent re rsum as proxy for per-record/agg-only mixed output

----------------------------------------------------------------
* introduce a fourth, padding separator for all formats? (for leading/trailing strip/skip.)
  o allows 'x = 10' in DKVP
  o allows right-justified keys in XTAB

* verb bar:
  - out-of-place bar -- preserving count as separate column?
  - fix # for just-above-lo bar: "[...]" & "<...]" & "[...>" ?

* time-until feature?? or just readme-type info?

----------------------------------------------------------------
MINOR: bootstrap sampling in hold-and-emit mode??

MINOR: hold-and-emit fraction?

MAJOR: statsn covar, ols, logistic: port material from my stats_m/sackmat_m for much of that

MAJOR: uni/multivariate logistic for ternary & above?

? wiki quickselect ?

----------------------------------------------------------------
MAJOR: csv mem-leak/read-perf

* current option runs faster w/o free, apparently due to heap-fragging
  o memory leak in csv reader! careful about slls data, and do not use lrec_put_no_free
  o redo inline-pasting but this time correctly weight the fragging effect
  o power-of-two
* for stdio, needs some thought ...
* ... but for mmap, it's almost always not necessary to strdup at all:
  only on escaped-double-quote case.
* denormalize the pbr & make stdio pbr & ptr-backed (mmap,UT-string) pbr.
* code-dup (yes, sadly!) the CSV reader into two & do strups in stdio
  but lrec_put w/ !LREC_FREE_VALUE for ptr-backed.
* or *maybe* pbr retent/free-flags for string/mmap w/o denorm, but only
  if it's both elegant and fast
! experimental/getlines.c shows that even without the heap-fragging
  issue, pfr+psb is 3.5x slower than getdelim. again suggesting
  multi-char-terminated getdelim might be the best line of approach.

----------------------------------------------------------------
MINOR:

* double-check for off-by-one buflen in cline/sline
* off-by-one error on fnr dkvp errmsg?
* scroll-stalls in mlrdoc!! really bad on the droid.
* hash-chain ifdef instrumentation -> maybe find a better hash function out there
* dsls/ build outside of pwd? or just lemon $(absdir)/filenamegoeshere.y?
* pprint join?
* comma-number -- using locale?
* poki cover -> readme
* include lemon-generated .c/.h or not
* lemon in-dir -- cf wiz note
* gprof link with -lc on FreeBSD -- ?

================================================================
HN FEEDBACKS 2015-08-15 (https://news.ycombinator.com/item?id=10066742)

look-ats:
* cq?
* https://github.com/harelba/q
* https://github.com/google/crush-tools
* https://github.com/BurntSushi/xsv
* https://github.com/pydata/pandas/blob/master/pandas/io/tests/test_parsers.py
* https://drill.apache.org
* https://github.com/dbro/csvquote

xperf:
* post rust/go cmps

================================================================
NEATEN

!! xxx's in the code
* source hygiene: top-of-header comments, readme re memory management, etc.

================================================================
COOKBOOK

* doc w/ very specific examples of sed/grep/etc preprocessing to structurize semi-structured data (e.g. logs)

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?
* look strdups at other lhm*
* look at any other strdups
* note that this free-at-end is highly pedantic *except* it allows me to check valgrind 100% leak-free
  to be sure i don't miss the ones that *do* matter in the record-loops

================================================================
NIDX/DKVP/...:

* maybe have a mode where "a" (not "a=1") -> "a=" with dkvp and "1=a" with nidx? 3rd format? 3 flavors
  of one format??

* dkvp as generalization of nidx. restructure mlrwik to emphasize this.
  tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
  some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
  presumably with a different name.  something about "header with data" or
  "key with value"?? lower-cased only rather than making it an acronym?

* nidx via field widths; left/right space-strip -- *only* if headers also don't have whitespace!!!

* maybe call dkvp labeled-index fmt
* definitely put nidx before dkvp in the mlrwik/formats page
* "index-numbered" -> "implicitly index-numbered" in mlrwik

================================================================
FUNCTIONS
? index   (i_ss) -- not very useful unless there are functions which take an index as an argument ...
? bit ops (i_ii) & | ^ << >>
? log2, exp2

================================================================
UT/REG
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* multi-csv I/O: include --icsvlite --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out
* modulus operator
* strlen
* make should-fail machinery & use it for null-key dkvp cases.
* all mathlib funcs
* int/float/string
* roundm function: round to multiple of m
* boolean() function
* boolean-valued put, e.g. mlr put '$ok = $x <= 10'
* nullability cases, esp. sort, and math funcs
* join with het data
* join with mixed-format/separator (left vs. right)
* join with left/right-prefix
* mmap/stdio UTs; run all cases with --mmap and again with --no-mmap
* all __X_MAIN__ instances -> UT code (effectively all-but-dead code at present)

================================================================
DOC

* Note that PCA is better than OLS for roundoff error (sum of squares ...):
  grep red data/multicountdown.txt | head -n 13 | mlr --opprint stats2 -a linreg-ols -f t,count
  grep red data/multicountdown.txt | head -n 14 | mlr --opprint stats2 -a linreg-ols -f t,count

================================================================
IMPROVEMENTS

* free-flag for string mlrvals

* run go/d/etc on sprax & include #'s in perf pg, and/or rm xref in the latter & just post xlang perf #'s there
* link to gh/jk/m xlang impls ... and/or cardify their sources :) ... or maybe just link to gh/jk/m xlang dir
* ack c impl has been repeatedly optimized but even the original version (also cutc.c ...) outperforms

* make a -D for hash-collision stats ...

* update t1.rb including numeric sort; fix appropriateness of -t=

* mlr sort -f -nr x: probably should sweep through all subcmds & disallow args to start
  with '-'

================================================================
HARDER HYGIENE
* eliminate compiler warnings for lemon & its autogenerated code

================================================================
PYTHON
* pgr + stats_m same I/O modules??

================================================================
FYI

Semantic versioning:
Given a version number MAJOR.MINOR.PATCH, increment the:

* MAJOR version when you make incompatible API changes,
* MINOR version when you add functionality in a backwards-compatible manner, and
* PATCH version when you make backwards-compatible bug fixes.

Initial release:
https://news.ycombinator.com/item?id=10066742
v2.0.0:
https://news.ycombinator.com/item?id=10132831
