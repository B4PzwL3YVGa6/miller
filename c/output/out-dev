
================================================================
GRAMMAR REORG


---------------------------------------------------------------- simplest
mlr -n put -v #
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
AST->CST STUB

mlr -n put -v #$m=2
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    = (srec_assignment):
        m (field_name).
        2 (strnum_literal).
AST->CST STUB
GOT MAIN:srec_assignment

mlr -n put -v #$m=2;$m=3
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    = (srec_assignment):
        m (field_name).
        2 (strnum_literal).
    = (srec_assignment):
        m (field_name).
        3 (strnum_literal).
AST->CST STUB
GOT MAIN:srec_assignment
GOT MAIN:srec_assignment

mlr -n put -v #$m=2;$m=3;$m=4
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    = (srec_assignment):
        m (field_name).
        2 (strnum_literal).
    = (srec_assignment):
        m (field_name).
        3 (strnum_literal).
    = (srec_assignment):
        m (field_name).
        4 (strnum_literal).
AST->CST STUB
GOT MAIN:srec_assignment
GOT MAIN:srec_assignment
GOT MAIN:srec_assignment

mlr -n put -v #$m=2;;$m=3;$m=4
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    = (srec_assignment):
        m (field_name).
        2 (strnum_literal).
    = (srec_assignment):
        m (field_name).
        3 (strnum_literal).
    = (srec_assignment):
        m (field_name).
        4 (strnum_literal).
AST->CST STUB
GOT MAIN:srec_assignment
GOT MAIN:srec_assignment
GOT MAIN:srec_assignment


---------------------------------------------------------------- begin/main/end
mlr -n put -v #begin{@b=1};$m=2;end{@e=3}
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    begin (begin):
        list (statement_list):
            = (oosvar_assignment):
                b (oosvar_name).
                1 (strnum_literal).
    = (srec_assignment):
        m (field_name).
        2 (strnum_literal).
    end (end):
        list (statement_list):
            = (oosvar_assignment):
                e (oosvar_name).
                3 (strnum_literal).
AST->CST STUB
GOT BEGIN:begin
-- WITHIN BEGIN:oosvar_assignment
GOT MAIN:srec_assignment
GOT END:end
-- WITHIN END:oosvar_assignment


---------------------------------------------------------------- main:cond
mlr -n put -v #true{$m=2}
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    cond (conditional_block):
        true (boolean_literal).
        list (statement_list):
            = (srec_assignment):
                m (field_name).
                2 (strnum_literal).
AST->CST STUB
GOT MAIN:conditional_block


---------------------------------------------------------------- main:empty-for
mlr -n put -v #for(k,v in $*) { }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    for (for-srec):
        variables (for-variables):
            k (non_sigil_name).
            v (non_sigil_name).
        list (statement_list):
AST->CST STUB
GOT MAIN:for-srec
FOR SREC STUB
cst_statement_alloc_for_srec stub!


---------------------------------------------------------------- main:single-statement-for
mlr -n put -v #for(k,v in $*) { $m=1}
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    for (for-srec):
        variables (for-variables):
            k (non_sigil_name).
            v (non_sigil_name).
        list (statement_list):
            = (srec_assignment):
                m (field_name).
                1 (strnum_literal).
AST->CST STUB
GOT MAIN:for-srec
FOR SREC STUB
cst_statement_alloc_for_srec stub!


---------------------------------------------------------------- main:double-statement-for
mlr -n put -v #for(k,v in $*) { $m=1;$m=2 }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    for (for-srec):
        variables (for-variables):
            k (non_sigil_name).
            v (non_sigil_name).
        list (statement_list):
            = (srec_assignment):
                m (field_name).
                1 (strnum_literal).
            = (srec_assignment):
                m (field_name).
                2 (strnum_literal).
AST->CST STUB
GOT MAIN:for-srec
FOR SREC STUB
cst_statement_alloc_for_srec stub!


---------------------------------------------------------------- main:for w/ break/continue
mlr -n put -v #for(k,v in $*) { $m=1;break;$m=2 }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    for (for-srec):
        variables (for-variables):
            k (non_sigil_name).
            v (non_sigil_name).
        list (statement_list):
            = (srec_assignment):
                m (field_name).
                1 (strnum_literal).
            break (break).
            = (srec_assignment):
                m (field_name).
                2 (strnum_literal).
AST->CST STUB
GOT MAIN:for-srec
FOR SREC STUB
cst_statement_alloc_for_srec stub!
break alloc stub!

mlr -n put -v #for(k,v in $*) { $m=1;break;continue;$m=2 }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    for (for-srec):
        variables (for-variables):
            k (non_sigil_name).
            v (non_sigil_name).
        list (statement_list):
            = (srec_assignment):
                m (field_name).
                1 (strnum_literal).
            break (break).
            continue (break).
            = (srec_assignment):
                m (field_name).
                2 (strnum_literal).
AST->CST STUB
GOT MAIN:for-srec
FOR SREC STUB
cst_statement_alloc_for_srec stub!
break alloc stub!
break alloc stub!

mlr -n put -v #for(k,v in $*) { $m=1;break;continue;;$m=2 }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    for (for-srec):
        variables (for-variables):
            k (non_sigil_name).
            v (non_sigil_name).
        list (statement_list):
            = (srec_assignment):
                m (field_name).
                1 (strnum_literal).
            break (break).
            continue (break).
            = (srec_assignment):
                m (field_name).
                2 (strnum_literal).
AST->CST STUB
GOT MAIN:for-srec
FOR SREC STUB
cst_statement_alloc_for_srec stub!
break alloc stub!
break alloc stub!


---------------------------------------------------------------- main:for:cond
mlr -n put -v #for(k,v in $*) { true{$m=3} }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    for (for-srec):
        variables (for-variables):
            k (non_sigil_name).
            v (non_sigil_name).
        list (statement_list):
            cond (conditional_block):
                true (boolean_literal).
                list (statement_list):
                    = (srec_assignment):
                        m (field_name).
                        3 (strnum_literal).
AST->CST STUB
GOT MAIN:for-srec
FOR SREC STUB
cst_statement_alloc_for_srec stub!


---------------------------------------------------------------- main:cond:for
mlr -n put -v #true{ for(k,v in $*) { $m=1 } }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    cond (conditional_block):
        true (boolean_literal).
        list (statement_list):
            for (for-srec):
                variables (for-variables):
                    k (non_sigil_name).
                    v (non_sigil_name).
                list (statement_list):
                    = (srec_assignment):
                        m (field_name).
                        1 (strnum_literal).
AST->CST STUB
GOT MAIN:conditional_block
FOR SREC STUB
cst_statement_alloc_for_srec stub!

mlr -n put -v #true{ for(k,v in $*) { $m=1;break;continue;;$m=2 } }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    cond (conditional_block):
        true (boolean_literal).
        list (statement_list):
            for (for-srec):
                variables (for-variables):
                    k (non_sigil_name).
                    v (non_sigil_name).
                list (statement_list):
                    = (srec_assignment):
                        m (field_name).
                        1 (strnum_literal).
                    break (break).
                    continue (break).
                    = (srec_assignment):
                        m (field_name).
                        2 (strnum_literal).
AST->CST STUB
GOT MAIN:conditional_block
FOR SREC STUB
cst_statement_alloc_for_srec stub!
break alloc stub!
break alloc stub!


---------------------------------------------------------------- main:cond:for:cond
mlr -n put -v #true{ for(k,v in $*) { true{$m=3} } }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    cond (conditional_block):
        true (boolean_literal).
        list (statement_list):
            for (for-srec):
                variables (for-variables):
                    k (non_sigil_name).
                    v (non_sigil_name).
                list (statement_list):
                    cond (conditional_block):
                        true (boolean_literal).
                        list (statement_list):
                            = (srec_assignment):
                                m (field_name).
                                3 (strnum_literal).
AST->CST STUB
GOT MAIN:conditional_block
FOR SREC STUB
cst_statement_alloc_for_srec stub!


---------------------------------------------------------------- ifs
mlr -n put -v #
  if (NR==1) {
    $x = 1
  };
  if (NR == 2) {
    $x = 3
  } else {
    $x = 4
  };
  if (NR == 5) {
    $x = 6
  } elif (NR == 7) {
    $x = 8
  } else {
    $x = 9
  }
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):
AST ROOT:
list (statement_list):
    if (ifchain):
        == (operator):
            NR (context_variable).
            1 (strnum_literal).
        list (statement_list):
            = (srec_assignment):
                x (field_name).
                1 (strnum_literal).
    if (ifchain):
        == (operator):
            NR (context_variable).
            2 (strnum_literal).
        list (statement_list):
            = (srec_assignment):
                x (field_name).
                3 (strnum_literal).
    if (ifchain):
        == (operator):
            NR (context_variable).
            5 (strnum_literal).
        list (statement_list):
            = (srec_assignment):
                x (field_name).
                6 (strnum_literal).
AST->CST STUB
GOT MAIN:ifchain
IFCHAIN STUB
cst_statement_alloc_ifchain stub!
GOT MAIN:ifchain
IFCHAIN STUB
cst_statement_alloc_ifchain stub!
GOT MAIN:ifchain
IFCHAIN STUB
cst_statement_alloc_ifchain stub!

