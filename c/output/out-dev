
================================================================
GRAMMAR REORG


---------------------------------------------------------------- simplest
mlr --from /dev/null put -v #$m=2;;$m=3;$m=4
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- begin/main/end
mlr --from /dev/null put -v #begin{$b=1};$m=2;end{$e=3}
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:cond
mlr --from /dev/null put -v #true{$m=2}
-- COND BLOCK:
-- -- BODY:
= (srec_assignment):
    m (field_name).
    2 (strnum_literal).
-- -- RHS:
true (boolean_literal).
-- -- LHS:
true (boolean_literal).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:empty-for
mlr --from /dev/null put -v #for(k,v in $*) { }
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:single-statement-for
mlr --from /dev/null put -v #for(k,v in $*) { $m=1}
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:double-statement-for
mlr --from /dev/null put -v #for(k,v in $*) { $m=1;$m=2 }
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:for w/ break/continue
mlr --from /dev/null put -v #for(k,v in $*) { $m=1;break;$m=2 }
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):

mlr --from /dev/null put -v #for(k,v in $*) { $m=1;break;continue;$m=2 }
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):

mlr --from /dev/null put -v #for(k,v in $*) { $m=1;break;continue;;$m=2 }
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:for:cond
mlr --from /dev/null put -v #for(k,v in $*) { true{$m=3} }
-- COND BLOCK:
-- -- BODY:
= (srec_assignment):
    m (field_name).
    3 (strnum_literal).
-- -- RHS:
true (boolean_literal).
-- -- LHS:
true (boolean_literal).
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:cond:for
mlr --from /dev/null put -v #true{ for(k,v in $*) { $m=1 } }
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
-- COND BLOCK:
-- -- BODY:
k (non_sigil_name).
-- -- RHS:
true (boolean_literal).
-- -- LHS:
true (boolean_literal).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):

mlr --from /dev/null put -v #true{ for(k,v in $*) { $m=1;break;continue;;$m=2 } }
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
-- COND BLOCK:
-- -- BODY:
k (non_sigil_name).
-- -- RHS:
true (boolean_literal).
-- -- LHS:
true (boolean_literal).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):


---------------------------------------------------------------- main:cond:for:cond
mlr --from /dev/null put -v #true{ for(k,v in $*) { true{$m=3} } }
-- COND BLOCK:
-- -- BODY:
= (srec_assignment):
    m (field_name).
    3 (strnum_literal).
-- -- RHS:
true (boolean_literal).
-- -- LHS:
true (boolean_literal).
-- FOR SREC:
k (non_sigil_name).
v (non_sigil_name).
-- COND BLOCK:
-- -- BODY:
k (non_sigil_name).
-- -- RHS:
true (boolean_literal).
-- -- LHS:
true (boolean_literal).
AST BEGIN STATEMENTS (0):
AST MAIN STATEMENTS (0):
AST END STATEMENTS (0):

